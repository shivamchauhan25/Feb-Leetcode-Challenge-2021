Binary Tree Right Side View
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
  Solution:-
  C++:
  
  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func(TreeNode* root, int level, vector<int>& ret){
        if(root == NULL)return;
        if(ret.size() == level){
            ret.push_back(root->val);
        }
        else{
            ret[level] = root->val;
        }
        func(root->left, level+1, ret);
        func(root->right, level+1, ret);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int> ret;
        func(root, 0, ret);
        return ret;
    }
};
