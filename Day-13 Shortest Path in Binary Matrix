Shortest Path in Binary Matrix

In an N by N square grid, each cell is either empty (0) or blocked (1).

A clear path from top-left to bottom-right has length k if and only if it is composed of cells C_1, C_2, ..., C_k such that:

Adjacent cells C_i and C_{i+1} are connected 8-directionally (ie., they are different and share an edge or corner)
C_1 is at location (0, 0) (ie. has value grid[0][0])
C_k is at location (N-1, N-1) (ie. has value grid[N-1][N-1])
If C_i is located at (r, c), then grid[r][c] is empty (ie. grid[r][c] == 0).
Return the length of the shortest such clear path from top-left to bottom-right.  If such a path does not exist, return -1.

 

Example 1:

Input: [[0,1],[1,0]]


Output: 2

Example 2:

Input: [[0,0,0],[1,1,0],[1,1,0]]


Output: 4

 

Note:

1 <= grid.length == grid[0].length <= 100
grid[r][c] is 0 or 1

Solution :
C++:

class Solution {
public:
    bool isvalid(int x, int y, int n ,int m , vector<vector<int>>&grid,vector<vector<int>>&vis)
    {
        if(x < 0 || y < 0 || x >= n || y >=m || grid[x][y] == 1 || vis[x][y] == true)
        {
            return false;
        }
        return true;
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        if(grid[0][0] == 1 || grid[n - 1][m - 1] == 1)
        {
            return -1;
        }
        vector<vector<int>>vis(n, vector<int>(m, false));
        queue<pair<int,int>>q;
        q.push({0,0});
        vis[0][0] = true;
        int level = 0;
        while(!q.empty())
        {
            int sz = q.size();
            level++;
            for(int i = 0; i < sz ; i++)
            {
                pair<int,int>cur = q.front();
                q.pop();
                int x = cur.first;
                int y = cur.second;
                if(x== n - 1 && y == m - 1)
                {
                    return level;
                }
            vector<vector<int>> dir = {{1,0},{-1,0},{0,-1},{0,1},{-1,-1},{1,-1},{1,1},{-1,1}};
               for(int i = 0 ; i < 8 ; i++)
               {
                   int new_x = x + dir[i][0];
                   int new_y = y + dir[i][1];
                   if(isvalid(new_x, new_y, n, m, grid, vis) == true)
                   {
                       q.push({new_x, new_y});
                       vis[new_x][new_y] = true;
                   }
               }
            }
        }
        return -1;
    }
};
